// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Company {
    id                 Int          @id @default(autoincrement())
    name               String
    logoUrl            String? // Novo
    themeColor         String? // Novo
    defaultLoyaltyType LoyaltyType? // Novo
    createdAt          DateTime     @default(now())
    updatedAt          DateTime     @updatedAt
    deletedAt          DateTime?

    branches    Branch[]
    employees   Employee[]
    rewards     Reward[]
    LoyaltyCard LoyaltyCard[]
    User        User[]
}

model Branch {
    id        Int       @id @default(autoincrement())
    name      String
    address   String? // Novo
    city      String? // Novo
    zipcode   String? // Novo
    companyId Int
    company   Company   @relation(fields: [companyId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    employees Employee[]
}

model Employee {
    id        Int       @id @default(autoincrement())
    name      String
    email     String    @unique
    phone     String?
    branchId  Int?
    branch    Branch?   @relation(fields: [branchId], references: [id])
    companyId Int
    company   Company   @relation(fields: [companyId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    loyaltyCardsStamped LoyaltyCardStamp[]
    rewardsProcessed    RewardRedemption[]
    User                User[]
}

model Customer {
    id         Int       @id @default(autoincrement())
    name       String
    email      String?   @unique
    phone      String?   @unique
    accessLink String    @unique
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?

    loyaltyCards     LoyaltyCard[]
    RewardRedemption RewardRedemption[]
    LogsError        LogsError[] // Novo
}

model LoyaltyCard {
    id         Int         @id @default(autoincrement())
    customerId Int
    customer   Customer    @relation(fields: [customerId], references: [id])
    companyId  Int
    company    Company     @relation(fields: [companyId], references: [id])
    type       LoyaltyType
    goal       Int
    current    Int         @default(0)
    isActive   Boolean     @default(true) // Novo
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    deletedAt  DateTime?

    stamps LoyaltyCardStamp[]
}

model LoyaltyCardStamp {
    id             Int         @id @default(autoincrement())
    loyaltyCardId  Int
    loyaltyCard    LoyaltyCard @relation(fields: [loyaltyCardId], references: [id])
    employeeId     Int
    employee       Employee    @relation(fields: [employeeId], references: [id])
    purchaseAmount Float? // Novo: valor da compra relacionada
    createdAt      DateTime    @default(now())
}

model Reward {
    id               Int                @id @default(autoincrement())
    name             String
    description      String?
    companyId        Int
    company          Company            @relation(fields: [companyId], references: [id])
    pointsRequired   Int
    type             LoyaltyType? // Novo: diferenciar se é para pontos ou carimbos
    stock            Int? // Novo: total disponível
    available        Boolean? // Novo: se ainda está disponível para resgate
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    deletedAt        DateTime?
    RewardRedemption RewardRedemption[]
}

model RewardRedemption {
    id         Int      @id @default(autoincrement())
    customerId Int
    customer   Customer @relation(fields: [customerId], references: [id])
    rewardId   Int
    reward     Reward   @relation(fields: [rewardId], references: [id])
    employeeId Int
    employee   Employee @relation(fields: [employeeId], references: [id])
    createdAt  DateTime @default(now())
}

model User {
    id             String      @id @default(uuid())
    name           String?
    email          String?     @unique
    password       String?
    hasFirstAccess Boolean?    @default(true)
    role           UserRole
    companyId      Int?
    company        Company?    @relation(fields: [companyId], references: [id])
    employeeId     Int?
    employee       Employee?   @relation(fields: [employeeId], references: [id])
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt
    LogsError      LogsError[] // Novo
}

model LogsError {
    id         Int       @id @default(autoincrement())
    message    String
    stackTrace String? // Novo
    method     String
    page       String
    userId     String? // Novo
    customerId Int? // Novo
    createdAt  DateTime  @default(now())
    User       User?     @relation(fields: [userId], references: [id])
    Customer   Customer? @relation(fields: [customerId], references: [id])
}

enum LoyaltyType {
    POINTS
    STAMPS
}

enum UserRole {
    ADMIN
    OWNER
    EMPLOYEE
}
